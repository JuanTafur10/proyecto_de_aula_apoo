import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog
from tkinter import ttk
from GestionDeTareas.model.GestionTareas import Categoria
from GestionDeTareas.model.GestionTareas import Usuario
from GestionDeTareas.model.GestionTareas import Tarea
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

class UITkinter(tk.Tk):
    def __init__(self, sistema):
        super().__init__()
        self.sistema = sistema
        self.configure(bg="black")  # esto sirve para el fondo negro de la ventana principal
        self.title("Gesti√≥n de Tareas")
        self.geometry("800x600")  # tamanhio de la pantalla
        
        # Estilo general
        style = ttk.Style(self)
        style.theme_use("clam")
        style.configure("TButton", padding=6, relief="flat", background="#333", foreground="white", font=("Helvetica", 12, "bold"))
        style.map("TButton", background=[("active", "#555")])

        self.main_menu()

    def main_menu(self):
        self.clear_window()

        tk.Label(self, text=" Men√∫ üìó", font=("Helvetica", 16, "bold"), bg="black", fg="white").pack(pady=10)

        botones = [
            ("Crear Cuenta de Usuario", self.crear_cuenta),
            ("Iniciar Sesi√≥n", self.iniciar_sesion),
            ("Cambiar Contrase√±a", self.cambiar_contrase√±a),
            ("Crear Tarea", self.crear_tarea),
            ("Editar Tarea", self.editar_tarea),
            ("Eliminar Tarea", self.eliminar_tarea),
            ("Crear Categor√≠a", self.crear_categoria),
            ("Mostrar Tareas por Categor√≠a", self.mostrar_tareas_por_categoria),
            ("Generar Informe en PDF", self.generar_informe_pdf),
            ("Salir ‚Ü©Ô∏è", self.quit)
        ]

        for text, command in botones:
            btn = ttk.Button(self, text=text, command=command, style="TButton")
            btn.pack(pady=5, padx=20, fill="x")

    def clear_window(self):
        for widget in self.winfo_children():
            widget.destroy()

    def mostrar_mensaje(self, mensaje: str):
        messagebox.showinfo("Mensaje", mensaje)

    def mostrar_error(self, mensaje: str):
        messagebox.showerror("Error", mensaje)

    def leer_entrada(self, mensaje: str) -> str:
        return simpledialog.askstring("Entrada", mensaje)

    def crear_cuenta(self):
        try:
            nombre_usuario = self.leer_entrada("Ingrese un nombre de usuario:")
            if not nombre_usuario:
                raise ValueError("El nombre de usuario es obligatorio.")

            contrase√±a = self.leer_entrada("Ingrese una contrase√±a (m√≠nimo 6 caracteres, con al menos una may√∫scula, un n√∫mero y un car√°cter especial):")
            if not contrase√±a:
                raise ValueError("La contrase√±a es obligatoria.")

            if not self.sistema.validar_nueva_contrase√±a(contrase√±a):
                raise ValueError("La contrase√±a no cumple los requisitos.")

            if self.sistema.crear_cuenta_usuario(nombre_usuario, contrase√±a):
                self.mostrar_mensaje("Cuenta creada exitosamente.")
            else:
                self.mostrar_error("Error al crear la cuenta. Verifique que el nombre de usuario est√© disponible y que la contrase√±a cumpla los requisitos.")
        except ValueError as ve:
            self.mostrar_error(f"Error: {ve}")
        except Exception as e:
            self.mostrar_error(f"Error inesperado: {e}")

    def iniciar_sesion(self):
        try:
            nombre_usuario = simpledialog.askstring("Iniciar Sesi√≥n", "Ingrese nombre de usuario:")
            contrase√±a = simpledialog.askstring("Iniciar Sesi√≥n", "Ingrese contrase√±a:", show="*")

            if self.sistema.validar_credenciales(nombre_usuario, contrase√±a):
                messagebox.showinfo("√âxito", f"Sesi√≥n iniciada para {nombre_usuario}.")
            else:
                messagebox.showerror("Error", "Credenciales incorrectas.")
        except Exception as e:
            messagebox.showerror("Error", f"Ocurri√≥ un error: {e}")

    def cambiar_contrase√±a(self):
        try:
            nombre_usuario = self.leer_entrada("Ingrese su nombre de usuario:")
            if not nombre_usuario:
                raise ValueError("El nombre de usuario es obligatorio.")

            usuario = self.sistema.usuarios.get(nombre_usuario)
            if not usuario:
                raise ValueError("El usuario no existe.")

            contrase√±a_actual = self.leer_entrada("Ingrese su contrase√±a actual:")
            if not contrase√±a_actual:
                raise ValueError("La contrase√±a actual es obligatoria.")

            if not self.sistema.validar_contrase√±a_actual(usuario, contrase√±a_actual):
                raise ValueError("La contrase√±a actual es incorrecta.")

            contrase√±a_nueva = self.leer_entrada("Ingrese su nueva contrase√±a (m√≠nimo 6 caracteres, con al menos una may√∫scula, un n√∫mero y un car√°cter especial):")
            if not contrase√±a_nueva:
                raise ValueError("La nueva contrase√±a es obligatoria.")

            if not self.sistema.validar_nueva_contrase√±a(contrase√±a_nueva):
                raise ValueError("La nueva contrase√±a no cumple los requisitos.")

            confirmar = self.leer_entrada("Confirme su nueva contrase√±a:")
            if not confirmar:
                raise ValueError("La confirmaci√≥n de la nueva contrase√±a es obligatoria.")

            if self.sistema.cambiar_contrase√±a(usuario, contrase√±a_actual, contrase√±a_nueva, confirmar):
                self.mostrar_mensaje("Contrase√±a cambiada correctamente.")
            else:
                self.mostrar_error("Error al cambiar la contrase√±a. Verifique los datos ingresados.")
        except ValueError as ve:
            self.mostrar_error(f"Error: {ve}")
        except Exception as e:
            self.mostrar_error(f"Error inesperado: {e}")

    def crear_tarea(self):
        try:
            titulo = self.leer_entrada("Ingrese el t√≠tulo de la tarea:")
            if not titulo or titulo.isspace():
                raise ValueError("El t√≠tulo es obligatorio.")

            descripcion = self.leer_entrada("Ingrese la descripci√≥n de la tarea:")
            if not descripcion or descripcion.isspace():
                raise ValueError("La descripci√≥n es obligatoria.")

            fecha_limite = self.leer_entrada("Ingrese la fecha l√≠mite de la tarea (YYYY-MM-DD):")
            if not fecha_limite or fecha_limite.isspace():
                raise ValueError("La fecha l√≠mite es obligatoria.")

            prioridad = self.leer_entrada("Ingrese la prioridad de la tarea (alta, media, baja):")
            if not prioridad or prioridad.isspace():
                raise ValueError("La prioridad es obligatoria.")

            categoria_nombre = self.leer_entrada("Ingrese la categor√≠a de la tarea (deje en blanco para ninguna):")
            categoria = None
            if categoria_nombre and not categoria_nombre.isspace():
                categoria = next((cat for cat in self.sistema.categorias if cat.nombre == categoria_nombre), None)
                if not categoria:
                    self.mostrar_mensaje(f"Categor√≠a '{categoria_nombre}' no encontrada. Creando nueva categor√≠a.")
                    categoria = self.sistema.crear_categoria(categoria_nombre)

            tarea = self.sistema.crear_tarea(titulo, descripcion, fecha_limite, prioridad, categoria)
            self.mostrar_mensaje(f"Tarea creada: {tarea}")
        except ValueError as ve:
            self.mostrar_error(f"Error: {ve}")
        except Exception as e:
            self.mostrar_error(f"Error inesperado: {e}")

    def editar_tarea(self):
        try:
            tarea_id = simpledialog.askinteger("Editar Tarea", "Ingrese el ID de la tarea a editar:")
            if not tarea_id:
                return

            tarea = next((t for t in self.sistema.tareas if t.id == tarea_id), None)
            if not tarea:
                messagebox.showerror("Error", "Tarea no encontrada.")
                return

            titulo = simpledialog.askstring("Editar Tarea", "Nuevo t√≠tulo (deje en blanco para no cambiar):", initialvalue=tarea.titulo)
            descripcion = simpledialog.askstring("Editar Tarea", "Nueva descripci√≥n (deje en blanco para no cambiar):", initialvalue=tarea.descripcion)
            fecha_limite = simpledialog.askstring("Editar Tarea", "Nueva fecha l√≠mite (YYYY-MM-DD):", initialvalue=tarea.fecha_limite)
            prioridad = simpledialog.askstring("Editar Tarea", "Nueva prioridad (alta, media, baja):", initialvalue=tarea.prioridad)
            categoria_nombre = simpledialog.askstring("Editar Tarea", "Nueva categor√≠a (deje en blanco para no cambiar):", initialvalue=tarea.categoria.nombre if tarea.categoria else "")

            categoria = next((cat for cat in self.sistema.categorias if cat.nombre == categoria_nombre), None)
            if not categoria and categoria_nombre:
                categoria = self.sistema.crear_categoria(categoria_nombre)

            self.sistema.editar_tarea(tarea_id, titulo, descripcion, fecha_limite, prioridad, categoria)
            messagebox.showinfo("√âxito", "Tarea editada correctamente.")
        except Exception as e:
            messagebox.showerror("Error", f"Ocurri√≥ un error al editar la tarea: {e}")

    def eliminar_tarea(self):
        try:
            tarea_id = simpledialog.askinteger("Eliminar Tarea", "Ingrese el ID de la tarea a eliminar:")
            if not tarea_id:
                return

            tarea = self.sistema.eliminar_tarea(tarea_id)
            if tarea:
                messagebox.showinfo("√âxito", f"Tarea eliminada: {tarea}")
            else:
                messagebox.showerror("Error", "Tarea no encontrada.")
        except Exception as e:
            messagebox.showerror("Error", f"Ocurri√≥ un error al eliminar la tarea: {e}")

    def crear_categoria(self):
        try:
            nombre = simpledialog.askstring("Crear Categor√≠a", "Ingrese el nombre de la categor√≠a:")
            categoria = self.sistema.crear_categoria(nombre)
            messagebox.showinfo("√âxito", f"Categor√≠a creada: {categoria}")
        except Exception as e:
            messagebox.showerror("Error", f"Ocurri√≥ un error al crear la categor√≠a: {e}")

    def mostrar_tareas_por_categoria(self):
        try:
            nombre_categoria = simpledialog.askstring("Mostrar Tareas", "Ingrese el nombre de la categor√≠a:")
            tareas = self.sistema.obtener_tareas_por_categoria(nombre_categoria)
            if tareas:
                tarea_str = "\n".join(str(t) for t in tareas)
                messagebox.showinfo(f"Tareas en '{nombre_categoria}'", tarea_str)
            else:
                messagebox.showinfo("Informaci√≥n", f"No hay tareas en la categor√≠a '{nombre_categoria}'.")
        except Exception as e:
            messagebox.showerror("Error", f"Ocurri√≥ un error al mostrar las tareas: {e}")

    def generar_informe_pdf(self):
        try:
            nombre_usuario = self.leer_entrada("Ingrese el nombre de usuario:")
            if not nombre_usuario:
                raise ValueError("El nombre de usuario es obligatorio.")

            archivo_pdf = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
            if not archivo_pdf:
                return

            self.sistema.generar_informe_pdf(nombre_usuario, archivo_pdf)
            self.mostrar_mensaje(f"Informe generado en {archivo_pdf}")
        except ValueError as ve:
            self.mostrar_error(f"Error: {ve}")
        except Exception as e:
            self.mostrar_error(f"Error inesperado: {e}")
